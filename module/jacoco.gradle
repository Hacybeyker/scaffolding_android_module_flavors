apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.7"
}

android {
    buildTypes {
        debug {
            testCoverageEnabled false
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
                testLogging {
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                    outputs.upToDateWhen { false }
                    showStandardStreams = true
                }
            }
        }

        sourceSets {
            main.java.srcDirs += 'src/main/java'
            test.java.srcDirs += 'src/test/java'
            androidTest.java.srcDirs += 'src/androidTest/java'
        }
    }

    def fileFilter = [
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            '**/R.class',
            '**/R\$*.class',
            '**/R2.class',
            '*/R2\$.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda\$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            '**/*$Result.*',
            '**/*$Result\$*.*',
            '**/*JsonAdapter.*',
            '*/*Test.*',
            'android/*/.*',
            '*/_ViewBinding*.*',
            '*/_Factory.*',
            '*/\$$Parcelable*.*'
    ]

    def googleTree = fileTree(dir: "${buildDir}/intermediates/javac/googleDebug/classes", excludes: fileFilter)
    def huaweiTree = fileTree(dir: "${buildDir}/intermediates/javac/huaweiDebug/classes", excludes: fileFilter)
    def googleKotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/googleDebug", excludes: fileFilter)
    def huaweiKotlinTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/huaweiDebug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinSrc = "${project.projectDir}/src/main/kotlin"

    task jacocoGoogleTestReport(type: JacocoReport, dependsOn: ['testGoogleDebugUnitTest'], group: 'jacocoReport') {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        getSourceDirectories().setFrom(files([mainSrc, kotlinSrc]))
        additionalSourceDirs(files(["src/main/java", "src/google/java", "src/testGoogle/java"]))
        getClassDirectories().setFrom(files([googleTree, googleKotlinTree]))
        getExecutionData().setFrom(files("${projectDir.absolutePath}/build/jacoco/testGoogleDebugUnitTest.exec"))
    }

    task jacocoGoogleTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoGoogleTestReport', group: 'jacocoReport') {

        getSourceDirectories().setFrom(files([mainSrc, kotlinSrc]))
        getClassDirectories().setFrom(files([googleTree, googleKotlinTree]))
        getExecutionData().setFrom(files("${projectDir.absolutePath}/build/jacoco/testGoogleDebugUnitTest.exec"))

        violationRules {
            setFailOnViolation(true)

            rule {
                limit {
                    minimum = 0.0
                }
            }
        }
    }

    task jacocoHuaweiTestReport(type: JacocoReport, dependsOn: ['testHuaweiDebugUnitTest'], group: 'jacocoReport') {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        getSourceDirectories().setFrom(files([mainSrc, kotlinSrc]))
        getClassDirectories().setFrom(files([huaweiTree, huaweiKotlinTree]))
        getExecutionData().setFrom(files("${projectDir.absolutePath}/build/jacoco/testHuaweiDebugUnitTest.exec"))
    }

    task jacocoHuaweiTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoHuaweiTestReport', group: 'jacocoReport') {

        getSourceDirectories().setFrom(files([mainSrc, kotlinSrc]))
        additionalSourceDirs(files(["src/main/java", "src/huawei/java", "src/testHuawei/java"]))
        getClassDirectories().setFrom(files([huaweiTree, huaweiKotlinTree]))
        getExecutionData().setFrom(files("${projectDir.absolutePath}/build/jacoco/testHuaweiDebugUnitTest.exec"))

        violationRules {
            setFailOnViolation(true)

            rule {
                limit {
                    minimum = 0.0
                }
            }
        }
    }
}